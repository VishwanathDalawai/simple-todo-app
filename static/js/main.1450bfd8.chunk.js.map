{"version":3,"sources":["serviceWorker.js","components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","this","props","todo","completed","id","title","className","type","checked","onChange","handleChangePropsList","onClick","deleteTodoPropsList","style","fontStyle","color","opacity","textDecoration","React","Component","TodosList","todosprops","map","key","handleChangePropsContainer","deleteTodoPropsContainer","Header","fontSize","marginBottom","paddingTop","paddingBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","TodoContainer","todos","uuidv4","handleChangeVishwa","todoi","delTodoVishwa","filter","addTodoItem","newTodo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1450bfd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport { FaTrash } from 'react-icons/fa';\r\n\r\nclass TodoItem extends React.Component {\r\n    //child component of TodosList\r\n\r\n  render() {\r\n      \r\n    const completedStyle = {\r\n    fontStyle: \"italic\",\r\n    color: \"#d35e0f\",\r\n    opacity: 0.4,\r\n    textDecoration: \"line-through\",\r\n    }\r\n\r\n    const { completed, id, title } = this.props.todo\r\n\r\n    return <li className=\"todo-item\">\r\n        <input \r\n            type=\"checkbox\" \r\n            checked={completed} \r\n            onChange={() => this.props.handleChangePropsList(id)}\r\n        />\r\n        <button onClick={()=> this.props.deleteTodoPropsList(id)}> \r\n            <FaTrash /> \r\n        </button>\r\n        <span style={completed ? completedStyle : null}> {/* Terenary operator */}\r\n            {title}\r\n        </span>\r\n    </li>\r\n  }\r\n}\r\n\r\nexport default TodoItem","import React from \"react\"\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodosList extends React.Component {\r\n    //child component of TodoContainer and parent component of TodoItem\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todosprops.map(todo => (\r\n            <TodoItem\r\n             key={todo.id} \r\n             todo={todo} \r\n             handleChangePropsList={this.props.handleChangePropsContainer}\r\n             deleteTodoPropsList={this.props.deleteTodoPropsContainer}    \r\n             />\r\n        ))}\r\n        {/*Whenever you map through something, a list is created.\r\n        React want each child in the list to have a unique key(id) prop. \r\n        This helps React to identify which items have changed, added or removed */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodosList","import React from \"react\"\r\n\r\n//Below is ES6 arrow function, it is same as function Header() {\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n        {/*\r\n        JavaScript expressions in JSX are written inside curly braces\r\n        The second curly brace is for the inline styling in the form of a JavaScript object.\r\n        */}\r\n          <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\", paddingTop: \"50px\"}}>Simple Todo App by Vishwa</h1>\r\n          <p style={{ fontSize: \"19px\", paddingTop: \"10px\", paddingBottom: \"10px\"}}>\r\n            Please add to-dos item(s) through the input field\r\n          </p>\r\n        </header>\r\n      )\r\n}\r\n\r\nexport default Header","import React, { Component } from \"react\"\r\n\r\nclass InputTodo extends Component {\r\n    state = {\r\n        title: \"\"\r\n      };\r\n/**\r\n * This function is called for every key stroke in input field. \r\n * You can't change/type in textfield untill this function is added\r\n */\r\n    onChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();     //prevents refresh of page\r\n        this.props.addTodoProps(this.state.title);\r\n        this.setState({\r\n            title: \"\"\r\n        })\r\n      };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n        <input \r\n            type=\"text\" \r\n            className=\"input-text\"\r\n            placeholder=\"Add Todo...\" \r\n            value={this.state.title} \r\n            name=\"title\"\r\n            onChange={this.onChange}\r\n        />\r\n        <input type=\"submit\" className=\"input-submit\" value=\"Submit\" />\r\n      </form>\r\n    )\r\n  }\r\n}\r\nexport default InputTodo","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport TodosList from \"./TodosList\";\r\nimport Header from \"./Header\";\r\nimport InputTodo from \"./InputTodo\"\r\n\r\nclass TodoContainer extends React.Component {\r\n  //Parent Component\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Setup development environment\",\r\n        completed: true\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Develop website and add content\",\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Deploy to live server\",\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Share it with your friends and email vishwanathdalawai111@gmail.com that you followed this github!\",\r\n        completed: false\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Be Happy, Be safe\",\r\n        completed: false\r\n      }\r\n    ]\r\n   };\r\n  \r\n   handleChangeVishwa = (id) => {\r\n     this.setState({\r\n       todos: this.state.todos.map(todoi => {\r\n         if (todoi.id === id){\r\n           todoi.completed = !todoi.completed;\r\n         }\r\n         return todoi;\r\n       })\r\n     });\r\n  };\r\n  /**\r\n   * Returns new array by removing id passed each time. i.e it returns items that dont match id \r\n   * ... is like static function. It allows us to grab only current items\r\n   */\r\n  delTodoVishwa = id => {\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos.filter(todo => {\r\n          return todo.id !== id;\r\n        })\r\n      ]\r\n    }); //filter method returns new array by applying condition \r\n  };\r\n  /**\r\n   * adds a item to state\r\n   */\r\n  addTodoItem = title => {\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n      title: title,\r\n      completed: false\r\n    };\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <InputTodo addTodoProps={this.addTodoItem}/>\r\n        <TodosList \r\n        todosprops={this.state.todos} \r\n        handleChangePropsContainer={this.handleChangeVishwa} \r\n        deleteTodoPropsContainer={this.delTodoVishwa}\r\n        /> \r\n          {/* todosprops is props passed to TodosList component*/}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\nimport TodoContainer from \"./components/TodoContainer\"\n\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"))\n\n\n/*ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}